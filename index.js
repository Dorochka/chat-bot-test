import { Telegraf, Markup } from 'telegraf';
import { Token } from './config.js';
import { ApiId} from './config.js';
import pkg from 'pg';
const { Client } = pkg;
import { bd_connect } from './bd.js'
import fetch from "node-fetch";
const config_bd = bd_connect
const pic = 'https://pythonist.ru/wp-content/uploads/2020/03/photo_2021-02-03_10-47-04-350x2000-1.jpg'


const client = new Client(config_bd)
client.connect(async (err) => {
    if (err) console.log(err);
    else {
        console.log("All is OK");
    }
});

const bot = new Telegraf(Token);
const start_hello = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–Ω–æ–ø–∫—É'
let rassul_flag = false

bot.start((ctx) => ctx.reply(start_hello, main_menu(ctx)))
bot.on('text', (ctx) => {
    switch (ctx.message.text) {
        case ("–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!"): read_python(ctx); ; break;
        case ("–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ"): weather(ctx); break;
        case ("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"): ctx.replyWithHTML(`<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?</b>`, shure()); break;
        case ("–û—Ç–º–µ–Ω–∞"): ctx.reply('üòû',otm()); break;
        case ("–£–≤–µ—Ä–µ–Ω"): rassul_flag = true; ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</b>`);  break;
        default: if(rassul_flag) {rassul(ctx);}
        else {ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–º–Ω—ã–π')} 
        break;
    }})

    function rassul(contx){
        let message_text = contx.message.text
        const chat_id = contx.from.id
        const text_command = 'Select chat_id from "users" where chat_id != $1'
        const vars_command = [chat_id]
        try {
            client.query(text_command, vars_command, async (err, res) => {
                if (err) {
                    console.log(err.stack)
                } else {
                    for (let i=0; i<res.rowCount; i++)
                    {
                        contx.telegram.sendMessage(res.rows[i].chat_id, message_text)
                    }
                    contx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', otm())
                }
            })
        }
        catch{}
    }

function otm()
{
    rassul_flag = false
    return Markup.keyboard([
        ["–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ"],
        ["–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!"],
        ["–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"]
    ]).resize();
}

function shure(){
    return Markup.keyboard([
        ["–£–≤–µ—Ä–µ–Ω", "–û—Ç–º–µ–Ω–∞"]
    ]).resize();
}

function read_python(cont){
    let caption_pic = '–ò–¥–µ–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ Python. –í—ã –Ω–∞–π–¥–µ—Ç–µ –º–æ—Ä–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –≤ Python, –∏–º–µ–Ω–∞—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö.'
    cont.replyWithPhoto(pic, {
        caption: caption_pic
    })
    cont.replyWithDocument({source: './karmaniy_spravochnik_po_piton.zip'})
}

function weather(context){
    let temperature, temperature_feel, message
    fetch(`https://api.openweathermap.org/data/2.5/weather?q=Ottava&appid=${ApiId}`)
    .then(function (resp){return resp.json()})
    .then(function (data){
        temperature = data.main.temp-273,15
        temperature = temperature.toFixed(2)
        temperature_feel = data.main.feels_like-273,15
        temperature_feel =temperature_feel.toFixed(2)
        message=`–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –û—Ç—Ç–∞–≤–∞, –ö–∞–Ω–∞–¥–∞: \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}\n –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${temperature_feel}`
        context.reply(message)
    })
    .catch()
}

function main_menu(cont) {
    const username = '@' + cont.from.username
    const chat_id = cont.from.id
    const tetx_main_check = 'Select * from "users" where username = $1'
    const values_main_check = [username]
    try {
        client.query(tetx_main_check, values_main_check, async (err, res) => {
            if (err) {
                console.log(err.stack)
            } else {
                if (res.rowCount == 0) {
                    const tetx_main = 'INSERT INTO "users" (username, first_name, chat_id) VALUES ($1, $2, $3)'
                    const values_main = [username, cont.from.first_name, chat_id]
                    try {
                        client.query(tetx_main, values_main);
                    }
                    catch (err) { console.log(err.stack) }

                }
                else {
                    const tetx_main_upd = 'Update "users" set username = $1, first_name= $2, chat_id = $3 where username = $1'
                    const values_main_upd = [username, cont.from.first_name, chat_id]
                    try {
                        await client.query(tetx_main_upd, values_main_upd);
                    }
                    catch (err) { console.log(err.stack) }
                }
            }
        });
    }
    catch { }
    return Markup.keyboard([
        ["–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ"],
        ["–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!"],
        ["–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"]
    ]).resize();
}
bot.launch();

